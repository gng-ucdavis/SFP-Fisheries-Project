##Starting from scratch#
####Summary after working through this script#
	##It works! I will have to double check the graphs and math but I think the code and math are correct here#
		##It doesn't have all the annotations from the previous code (to keep it cleanish) but it also has a fair bit of junk to it#
			##Going to keep it that way. look at old code if you want explanation on functions#
			##Next step is to find relevant parameters#
				####And appropriate time steps! (which means units on your parameters!!)#
			##Also also, think about improving it for crab/biphasic life cycle#
				##Merge with IBMs?#
#
##Growth model#
l.inf=1#
l.rel=0.5#
K=1#
#
size=function(t){#
	l=l.inf-(l.inf-l.rel)*exp(-K*t) #Shows growth of organism over time where l.inf is adult size, l.rel is the size at release, K is growth rate, and t is time#
}#
#
#Mortality function#
mr=0.01#
lr=1#
#
mortality=function(l) {#
	m=mr*(lr/l) #This creates an asymptotic decline in mortality rate (m) as a function of length (l). mr and lr are referenced mortality rates and length#
}#
#
##Fishing function#
f.inf=0.01#
q=1#
lc=1#
#
fishing=function(l) {#
	f=f.inf/(1+exp(q*(l-lc))) #This describes fishing mortality as a function of fish size. f.inf is the fishing mortality at adult size, q is the selectivity curve, and lc is the length at 50% gear selection (similar to Michaelis-Menten equation?)#
}#
#
##Basis for number functions but don't actually run it because need to do this in a forloop#
# numbers=function(t) {#
	# n[i+1]<<-n.1*exp(-(mortality(size(t))+fishing(size(t)))*delta.t) ##where n.1 is number of released organism at the prior time point, and delta.t is the change in time frame between n.1 and n#
# }#
#
# numbers=function(t, i) {#
	# num=n[i]*exp(-(mortality(size(t[i]))+fishing(size(t[i])))*delta.t) ###And technically, i is a variable in the function (Yep)#
# } ###Dumbass, don't need t[i] in function when you already specify that t=t[i] in forloop!!#
#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(size(t))+fishing(size(t)))*delta.t) ###And technically, i is a variable in the function (Yep)#
}#
t=seq(from=0, to=40, by=0.1) ##Need to figure out if starts at 1 or 0 for time. ##Might actually want 0 because that will give reference size for crabs (and relevant parameters following that)#
n=rep(0, length(t))#
h=rep(0, length(t))#
m=rep(0, length(t))#
s=rep(0, length(t))#
f=rep(0, length(t))#
n[1]=1000#
delta.t=1#
##Clean up the above code and make into forloop ####Yes!!!!! This works!!!1#
for(i in 1:length(t))#
{#
	n[i+1]=numbers(t=t[i], i=i)#
	s[i+1]=size(t[i])#
	m[i+1]=mortality(size(t[i]))#
	f[i+1]=fishing(size(t[i]))#
}#
#
length(t)#
t.1=c(t, max(t)+1)#
par(mfrow=(c(2,2)))#
plot(n~t.1)#
plot(m~t.1)#
plot(s~t.1)#
plot(f~t.1)
##Starting from scratch#
####Summary after working through this script#
	##It works! I will have to double check the graphs and math but I think the code and math are correct here#
		##It doesn't have all the annotations from the previous code (to keep it cleanish) but it also has a fair bit of junk to it#
			##Going to keep it that way. look at old code if you want explanation on functions#
			##Next step is to find relevant parameters#
				####And appropriate time steps! (which means units on your parameters!!)#
			##Also also, think about improving it for crab/biphasic life cycle#
				##Merge with IBMs?#
#
##Growth model#
l.inf=1#
l.rel=0.5#
K=1#
#
size=function(t){#
	l=l.inf-(l.inf-l.rel)*exp(-K*t) #Shows growth of organism over time where l.inf is adult size, l.rel is the size at release, K is growth rate, and t is time#
}#
#
#Mortality function#
mr=0.01#
lr=1#
#
mortality=function(l) {#
	m=mr*(lr/l) #This creates an asymptotic decline in mortality rate (m) as a function of length (l). mr and lr are referenced mortality rates and length#
}#
#
##Fishing function#
f.inf=0.01#
q=1#
lc=1#
#
fishing=function(l) {#
	f=f.inf/(1+exp(q*(l-lc))) #This describes fishing mortality as a function of fish size. f.inf is the fishing mortality at adult size, q is the selectivity curve, and lc is the length at 50% gear selection (similar to Michaelis-Menten equation?)#
}#
#
##Basis for number functions but don't actually run it because need to do this in a forloop#
# numbers=function(t) {#
	# n[i+1]<<-n.1*exp(-(mortality(size(t))+fishing(size(t)))*delta.t) ##where n.1 is number of released organism at the prior time point, and delta.t is the change in time frame between n.1 and n#
# }#
#
# numbers=function(t, i) {#
	# num=n[i]*exp(-(mortality(size(t[i]))+fishing(size(t[i])))*delta.t) ###And technically, i is a variable in the function (Yep)#
# } ###Dumbass, don't need t[i] in function when you already specify that t=t[i] in forloop!!#
#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(size(t))+fishing(size(t)))*delta.t) ###And technically, i is a variable in the function (Yep)#
}#
t=seq(from=0, to=40, by=0.1) ##Need to figure out if starts at 1 or 0 for time. ##Might actually want 0 because that will give reference size for crabs (and relevant parameters following that)#
n=rep(0, length(t))#
h=rep(0, length(t))#
m=rep(0, length(t))#
s=rep(0, length(t))#
f=rep(0, length(t))#
n[1]=1#
delta.t=1#
##Clean up the above code and make into forloop ####Yes!!!!! This works!!!1#
for(i in 1:length(t))#
{#
	n[i+1]=numbers(t=t[i], i=i)#
	s[i+1]=size(t[i])#
	m[i+1]=mortality(size(t[i]))#
	f[i+1]=fishing(size(t[i]))#
}#
#
length(t)#
t.1=c(t, max(t)+1)#
par(mfrow=(c(2,2)))#
plot(n~t.1)#
plot(m~t.1)#
plot(s~t.1)#
plot(f~t.1)
l
s
x
x=seq(from= 0.1, to 10, by =0.1)
x=seq(from= 0.1, to=10, by =0.1)
y
y=fishing(x)
plot(y~x)
f.inf=1
f.inf=1#
q=1#
lc=1#
#
fishing=function(l) {#
	f=f.inf/(1+exp(q*(l-lc))) #This describes fishing mortality as a function of fish size. f.inf is the fishing mortality at adult size, q is the selectivity curve, and lc is the length at 50% gear selection (similar to Michaelis-Menten equation?)#
}
x=seq(from= 0.1, to=10, by =0.1)
y=fishing(x)
plot(y~x)
x=seq(from= 0.1, to=2, by =0.01)#
y=fishing(x)#
plot(y~x)
x=seq(from= 0.1, to=5, by =0.01)#
y=fishing(x)#
plot(y~x)
y=mortality(x)
plot(y~x)
####This code is to recreate the Lorenzen model using actual data for juveniles to adult#
#
##Growth model (I guess with a von bertalanffy model, I dont' have to do stepwise function. Implicitly assuming continuous growth)#
l.inf=mean(c(219.8, 204.1, 208, 211.8, 211, 188.6)) ##average adult size (CW) in mm#
l.rel=mean(c(2.38, 2.43)) ##average size at crab stage 1#
# K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62)) ####Based on the modeled outputs and the results from Josileen and Menon 2005, I'm pretty sure these K values are annual growth rates. So I'm going to divide them by 365 and work in days#
K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62))/365#
#
size=function(t){#
	l=l.inf-(l.inf-l.rel)*exp(-K*t)#
}#
#
t=seq(0, 365, by =1) ##assume day#
length=size(t)#
plot(length~t) ##excellent, growth output seems to match paper's data#
#
##Mortality function#
mr=1 ###Most basic, I need some number for mr (at corresponding lr)#
lr=0.5#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
m=mortality(length)#
plot(m~length)#
#
plot(m~t)#
##Fishing function, may have actual data here=#
##Should note that f and m are 'rate' in Nexp(rt) so can be any positive numbers (greater than 1 less than 1, it's all good). But doesn't have any meaningful units. It's not %/time period#
f.inf=2.96 #SE 0.315#
# # q=-1.58 ##Pretty sure q has to be a negative number or equation should have a (-) sign. Going to make q solely positive and put (-) in equation#
q=0.158 ##SE 0.126 ##Maybe I want a different distribution than normal for this parameter (has to be soley positive, gamma or use absolute values)#
lc=108.3 ##SE 5.8 ##
#
fishing=function(l) {#
	f=f.inf/(1+exp(-q*(l-lc)))#
}#
#
f=fishing(length)#
plot(f~length)#
plot(f~t)#
#
##Construct actual forloop#
##Great everything works in theory and really, all I need now is to fill in numbers#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(size(t))+fishing(size(t)))*delta.t) ###And technically, i is a variable in the function (Yep)#
}#
#
t=seq(from=0, to=365, by=1) ##Need to figure out if starts at 1 or 0 for time. ##Might actually want 0 because that will give reference size for crabs (and relevant parameters following that)#
n=rep(0, length(t))#
h=rep(0, length(t))#
m=rep(0, length(t))#
s=rep(0, length(t))#
f=rep(0, length(t))#
#
n[1]=1000#
delta.t=1#
for(i in 1:length(t))#
{#
	n[i+1]=numbers(t=t[i], i=i)#
	s[i+1]=size(t[i])#
	m[i+1]=mortality(size(t[i]))#
	f[i+1]=fishing(size(t[i]))#
}#
#
t.1=c(t, max(t)+1)#
par(mfrow=(c(2,2)))#
plot(n~t.1)#
plot(m~t.1)#
plot(s~t.1)#
plot(f~t.1)
##This script is to generate estimates of zoea growth data for von Bertlanffy using Josileen and Menon 2004#
data=read.csv('~/Dropbox/Postdoc/Blue crab stock enhancement project/SFP/SFP Model Code/Zoea growth data.csv')#
head(data)#
data$length=data$Carapace.length..mm.#
data$Day.cu=cumsum(data$Day)#
plot(length~Day.cu, data=data)#
#
##I'm realizing that I shouldn't necessarily use the end date for each stage when modeling growth#
	##Because it's discrete growth, I should use the mid-point of each stage to represet their size #
		##Or better yet have multiple time points for each stage... (would that narrow CI too much for parameter estimates?)#
		##Also also, big jump in size when going to megalopae which could impact von Bertalanffy curve...#
			##Ingoring that aspect for now and just see how well the curve fits (no one says asymptote has to occur)#
day=seq(from =0, to =15.5, by =0.5)#
cw=c(rep(0.48, 8), rep(0.75, 7), rep(0.83, 5), rep(1.02, 5), rep(1.75, 7))#
plot(cw~day)#
#
l.rel=0.48 ##average size at 1st zoea stage#
##So now fit von?#
z.nls=nls(cw~l.inf-(l.inf-l.rel)*exp(-K*day), start=list(l.inf=1.9, K=0.8), trace=T )#
l.inf=7.2#
K=0.008#
cw.sim=l.inf-(l.inf-l.rel)*exp(-K*day)#
#
plot(cw~day, pch=16)#
lines(cw.sim~day)#
###Okay vonBerlannfy is a fail. Can't get model to fit#
###2 possible train of thoughts#
	##Remove megalopa stage and try again? (Could work but now I need to somehow incorporate megalopa into it)#
	###The method I'm leaning towards: we dont' need a regression to model growth because we have explict data at each time point...#
		###Obviously, obviously we are overfiting here#
		##But we can add some error in length for the growth data...#
		##So it's a stepwise function where given the day, we will give you size of larvae... (hm)#
			##And can still incorporate mortality/length relationship...#
##Okay, work with me here, create a step-wise function#
larvae.size=function(day){#
	if(day<3.5){#
	cl=0.48	#
	}#
	else if(day<7.5 & day>=3.5){#
	cl=0.75#
	}#
	else if(day<9.5 & day>=7.5){#
	cl=0.83#
	}#
	else if(day<12 & day>=9.5){#
	cl=1.02#
	}#
	else if(day<=15.5 & day>=12){#
	cl=1.75#
	}#
	else print('not larva')#
}#
#
day=seq(from =0, to =15.5, by =0.5)#
cl=larvae.size(day) ###Fascinating, function can only look at one value at a time and so uses only the first value in the day vector#
					##Seeems to counter the whole point of vectorization... forloop then?#
cl=rep(0, length(day))#
for(i in 1:length(day))#
{#
	cl[i]=larvae.size(day[i])#
}#
plot(cl~day) ##Cool, I"ve just reconstructed the data from the paper.#
##Next step is to incorporate some noise#
#
larvae.size=function(day){#
	if(day<3.5){#
	cl=runif(1, 0.44, 0.54)	#
	}#
	else if(day<7.5 & day>=3.5){#
	cl=runif(1, 0.72, 0.77)#
	}#
	else if(day<9.5 & day>=7.5){#
	cl=runif(1, 0.79, 0.87)#
	}#
	else if(day<12 & day>=9.5){#
	cl=runif(1, 0.98, 1.06)#
	}#
	else if(day<=15.5 & day>=12){#
	cl=runif(1, 1.69, 1.81)#
	}#
	else print('not larva')#
}#
day=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(day))#
for(i in 1:length(day))#
{#
	cl[i]=larvae.size(day[i])#
}#
plot(cl~day) ##Cool cool, I'm okay with this
###Creating (potentially) final code incorporating both larvae/juveniles stage#
	##Have to be careful not to get my variables crossed#
	##Also start to incorporate some uncertainty#
#
##What data do we have for growth?#
	##Look at the script on "modeling zoea growth" for details but the function is as below#
larvae.size=function(t){#
	if(t<3.5){#
	cl=0.49 #runif(1, 0.44, 0.54)	#
	}#
	else if(t<7.5 & t>=3.5){#
	cl= 0.75 #runif(1, 0.72, 0.77)#
	}#
	else if(t<9.5 & t>=7.5){#
	cl=0.83 #runif(1, 0.79, 0.87)#
	}#
	else if(t<12 & t>=9.5){#
	cl=1.02 #runif(1, 0.98, 1.06)#
	}#
	else if(t<=15.5 & t>=12){#
	cl=1.75 #runif(1, 1.69, 1.81)#
	}#
	else print('not larva')#
}#
t=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(t))#
for(i in 1:length(t))#
{#
	cl[i]=larvae.size(t[i])#
}#
plot(cl~t)#
#
##Add in mortality function#
mr=0.12 #Got mortality rates from data using 'Calculating mortality rates for larvae' script#
lr=1#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
#
###Let's create the actual model forloop for total mortality#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(larvae.size(t)))*delta.t) ###Removed fishing mortrality#
}#
#
##Hmm.. for larvae, time span is limited to 15.5 days and in this case, maybe want higher resolution time point (like 0.5 days?)#
delta.t=0.5 ##Resolution between time points#
t.larvae=seq(from=0, to=15.5, by=delta.t) #
n.larvae=rep(0, length(t))#
m.larvae=rep(0, length(t))#
s.larvae=rep(0, length(t))#
#
n.larvae[1]=1 ##Starting population size#
#
for(i in 1:length(t))#
{#
	n.larvae[i+1]=numbers(t=t[i], i=i)#
	s.larvae[i+1]=larvae.size(t[i])#
	m.larvae[i+1]=mortality(larvae.size(t[i]))#
}#
#
t.1=c(t.larvae, max(t.larvae)+1)#
par(mfrow=(c(2,2)))#
plot(s.larvae~t.1, ylab='Crab length (mm)', xlab='Days',  cex.lab=1.5, cex.axis=1.5)#
text(1, 1.6, labels=c('a'), cex=2 )#
plot(m.larvae~t.1, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.22, labels=c('b'), cex=2 )#
plot(n.larvae~t.1, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('c'), cex=2 )#
#
larval.data=data.frame(n.larvae,s.larvae,m.larvae)#
#n~0.09 after larvae (9% survival is decent)
###Creating (potentially) final code incorporating both larvae/juveniles stage#
	##Have to be careful not to get my variables crossed#
	##Also start to incorporate some uncertainty#
#
##What data do we have for growth?#
	##Look at the script on "modeling zoea growth" for details but the function is as below#
larvae.size=function(t){#
	if(t<3.5){#
	cl=0.49 #runif(1, 0.44, 0.54)	#
	}#
	else if(t<7.5 & t>=3.5){#
	cl= 0.75 #runif(1, 0.72, 0.77)#
	}#
	else if(t<9.5 & t>=7.5){#
	cl=0.83 #runif(1, 0.79, 0.87)#
	}#
	else if(t<12 & t>=9.5){#
	cl=1.02 #runif(1, 0.98, 1.06)#
	}#
	else if(t<=15.5 & t>=12){#
	cl=1.75 #runif(1, 1.69, 1.81)#
	}#
	else print('not larva')#
}#
t=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(t))#
for(i in 1:length(t))#
{#
	cl[i]=larvae.size(t[i])#
}#
plot(cl~t)#
#
##Add in mortality function#
mr=0.12 #Got mortality rates from data using 'Calculating mortality rates for larvae' script#
lr=1#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
#
###Let's create the actual model forloop for total mortality#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(larvae.size(t)))*delta.t) ###Removed fishing mortrality#
}#
#
##Hmm.. for larvae, time span is limited to 15.5 days and in this case, maybe want higher resolution time point (like 0.5 days?)#
delta.t=0.5 ##Resolution between time points#
t.larvae=seq(from=0, to=15.5, by=delta.t) #
n.larvae=rep(0, length(t))#
m.larvae=rep(0, length(t))#
s.larvae=rep(0, length(t))#
#
n.larvae[1]=1 ##Starting population size#
#
for(i in 1:length(t.larvae))#
{#
	n.larvae[i+1]=numbers(t=t.larvae[i], i=i)#
	s.larvae[i+1]=larvae.size(t.larvae[i])#
	m.larvae[i+1]=mortality(larvae.size(t.larvae[i]))#
}#
#
t.1.larvae=c(t.larvae, max(t.larvae)+1)#
par(mfrow=(c(2,2)))#
plot(s.larvae~t.1.larvae, ylab='Crab length (mm)', xlab='Days',  cex.lab=1.5, cex.axis=1.5)#
text(1, 1.6, labels=c('a'), cex=2 )#
plot(m.larvae~t.1.larvae, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.22, labels=c('b'), cex=2 )#
plot(n.larvae~t.1.larvae, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('c'), cex=2 )#
#
larval.data=data.frame(n.larvae,s.larvae,m.larvae)#
#n~0.09 after larvae (9% survival is decent)
larval.data
t.larve
t.larvae
t.1.larvae
for(i in 1:length(t.larvae))#
{#
	n.larvae[i+1]=numbers(t=t.larvae[i], i=i)#
	s.larvae[i+1]=larvae.size(t.larvae[i])#
	m.larvae[i+1]=mortality(larvae.size(t.larvae[i]))#
}
numbers=function(t, i) {#
	num=n.larvae[i]*exp(-(mortality(larvae.size(t)))*delta.t) ###Removed fishing mortrality#
}
##Hmm.. for larvae, time span is limited to 15.5 days and in this case, maybe want higher resolution time point (like 0.5 days?)#
delta.t=0.5 ##Resolution between time points#
t.larvae=seq(from=0, to=15.5, by=delta.t) #
n.larvae=rep(0, length(t))#
m.larvae=rep(0, length(t))#
s.larvae=rep(0, length(t))#
#
n.larvae[1]=1 ##Starting population size#
#
for(i in 1:length(t.larvae))#
{#
	n.larvae[i+1]=numbers(t=t.larvae[i], i=i)#
	s.larvae[i+1]=larvae.size(t.larvae[i])#
	m.larvae[i+1]=mortality(larvae.size(t.larvae[i]))#
}
t.1.larvae=c(t.larvae, max(t.larvae)+delta.t)#
par(mfrow=(c(2,2)))#
plot(s.larvae~t.1.larvae, ylab='Crab length (mm)', xlab='Days',  cex.lab=1.5, cex.axis=1.5)#
text(1, 1.6, labels=c('a'), cex=2 )#
plot(m.larvae~t.1.larvae, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.22, labels=c('b'), cex=2 )#
plot(n.larvae~t.1.larvae, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('c'), cex=2 )
###Creating (potentially) final code incorporating both larvae/juveniles stage#
	##Have to be careful not to get my variables crossed#
	##Also start to incorporate some uncertainty#
#
##What data do we have for growth?#
	##Look at the script on "modeling zoea growth" for details but the function is as below#
larvae.size=function(t){#
	if(t<3.5){#
	cl=0.49 #runif(1, 0.44, 0.54)	#
	}#
	else if(t<7.5 & t>=3.5){#
	cl= 0.75 #runif(1, 0.72, 0.77)#
	}#
	else if(t<9.5 & t>=7.5){#
	cl=0.83 #runif(1, 0.79, 0.87)#
	}#
	else if(t<12 & t>=9.5){#
	cl=1.02 #runif(1, 0.98, 1.06)#
	}#
	else if(t<=15.5 & t>=12){#
	cl=1.75 #runif(1, 1.69, 1.81)#
	}#
	else print('not larva')#
}#
t=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(t))#
for(i in 1:length(t))#
{#
	cl[i]=larvae.size(t[i])#
}#
plot(cl~t)#
#
##Add in mortality function#
mr=0.12 #Got mortality rates from data using 'Calculating mortality rates for larvae' script#
lr=1#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
#
###Let's create the actual model forloop for total mortality#
numbers=function(t, i) {#
	num=n.larvae[i]*exp(-(mortality(larvae.size(t)))*delta.t) ###Removed fishing mortrality#
}#
#
##Hmm.. for larvae, time span is limited to 15.5 days and in this case, maybe want higher resolution time point (like 0.5 days?)#
delta.t=0.5 ##Resolution between time points#
t.larvae=seq(from=0, to=15.5, by=delta.t) #
n.larvae=rep(0, length(t))#
m.larvae=rep(0, length(t))#
s.larvae=rep(0, length(t))#
#
n.larvae[1]=1 ##Starting population size#
#
for(i in 1:length(t.larvae))#
{#
	n.larvae[i+1]=numbers(t=t.larvae[i], i=i)#
	s.larvae[i+1]=larvae.size(t.larvae[i])#
	m.larvae[i+1]=mortality(larvae.size(t.larvae[i]))#
}#
#
t.1.larvae=c(t.larvae, max(t.larvae)+delta.t)#
par(mfrow=(c(2,2)))#
plot(s.larvae~t.1.larvae, ylab='Crab length (mm)', xlab='Days',  cex.lab=1.5, cex.axis=1.5)#
text(1, 1.6, labels=c('a'), cex=2 )#
plot(m.larvae~t.1.larvae, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.22, labels=c('b'), cex=2 )#
plot(n.larvae~t.1.larvae, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('c'), cex=2 )#
#
larval.data=data.frame(n.larvae,s.larvae,m.larvae)#
#n~0.09 after larvae (9% survival is decent)#
######Code for juveniles: for simplicity sake, I will leave variables as is and only change variable names for larvae#
l.inf=mean(c(219.8, 204.1, 208, 211.8, 211, 188.6)) ##average adult size (CW) in mm#
l.rel=mean(c(2.38, 2.43)) ##average size at crab stage 1#
# K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62)) ####Based on the modeled outputs and the results from Josileen and Menon 2005, I'm pretty sure these K values are annual growth rates. So I'm going to divide them by 365 and work in days#
K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62))/365#
#
size=function(t){#
	l=l.inf-(l.inf-l.rel)*exp(-K*t)#
}#
#
t=seq(0, 365, by =1) ##assume day#
length=size(t)#
plot(length~t, ylab='Carapace width (mm)', xlab='Days', cex.axis=1.5, cex.lab=1.5) ##excellent, growth output seems to match paper's data#
#
##Mortality function#
mr=0.0176 ###Using values from 'Calculating mortality rates for juveniles'#
lr=5#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
m=mortality(length)#
plot(m~length)#
#
plot(m~t)#
##Fishing function, may have actual data here=#
##Should note that f and m are 'rate' in Nexp(rt) so can be any positive numbers (greater than 1 less than 1, it's all good). But doesn't have any meaningful units. It's not %/time period#
f.inf=2.96 #SE 0.315#
# # q=-1.58 ##Pretty sure q has to be a negative number or equation should have a (-) sign. Going to make q solely positive and put (-) in equation#
q=0.158 ##SE 0.126 ##Maybe I want a different distribution than normal for this parameter (has to be solely positive, gamma or use absolute values)#
lc=108.3 ##SE 5.8 ##
#
fishing=function(l) {#
	f=f.inf/(1+exp(-q*(l-lc)))#
}#
#
f=fishing(length)#
plot(f~length)#
plot(f~t)#
#
##Construct actual forloop#
##Great everything works in theory and really, all I need now is to fill in numbers#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(size(t))+fishing(size(t)))*delta.t)#
}#
#
t=seq(from=0, to=365, by=1) ##Need to figure out if starts at 1 or 0 for time. ##Might actually want 0 because that will give reference size for crabs (and relevant parameters following that)#
n=rep(0, length(t))#
h=rep(0, length(t))#
m=rep(0, length(t))#
s=rep(0, length(t))#
f=rep(0, length(t))#
#
n[1]=1#
delta.t=1#
for(i in 1:length(t))#
{#
	n[i+1]=numbers(t=t[i], i=i)#
	s[i+1]=size(t[i])#
	m[i+1]=mortality(size(t[i]))#
	f[i+1]=fishing(size(t[i]))#
}#
#
t.1=c(t, max(t)+1)#
par(mfrow=(c(2,2)))#
plot(s~t.1, ylab='Crab width (mm)', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 160, labels=c('a'), cex=2 )#
plot(m~t.1, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.035, labels=c('b'), cex=2 )#
plot(f~t.1, ylab='Fishing mortality', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 2.8, labels=c('c'), cex=2 )#
plot(n~t.1, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('d'), cex=2 )#
#
final.data=data.frame(n, m, s,f, t.1)#
final.data[final.data$s<100,]$n#
##So it looks like 0.000153 make it to 100mm (mostly because of high fishing mortality)#
0.000153*100 #percent#
#
##0.09*0.000153 (larval and juvenile survival)#
0.09*0.000153
larval.data=data.frame(n.larvae,s.larvae,m.larvae)
larval.data
larval.data[,33]
larval.data[33,]
nrow(larval.data)
larval.data[nrow(larval.data),]$n.larvae
surv.larvae=larval.data[nrow(larval.data),]$n.larvae
final.data[final.data$s<100,]$n
final.data[final.data$s<100,]$n[1]
final.data[final.data$s<100,]$n[2]
final.data[final.data$s<100,]$n[3]
final.data[final.data$s<100,]$n[5]
final.data[final.data$s<100,]$n[length(final.data[final.data$s<100,]$n)]
surv.larvae*surv.juv
surv.juv=final.data[final.data$s<100,]$n[length(final.data[final.data$s<100,]$n)] ##This weird gross piece of code finds the last value for proportion survivng where crabs are right before 100mm
surv.larvae*surv.juv
k
l
###Creating (potentially) final code incorporating both larvae/juveniles stage#
	##Have to be careful not to get my variables crossed#
	##Also start to incorporate some uncertainty#
#
##What data do we have for growth?#
	##Look at the script on "modeling zoea growth" for details but the function is as below#
for(k in 1:100)#
{#
larvae.size=function(t){#
	if(t<3.5){#
	cl=0.49 #runif(1, 0.44, 0.54)	#
	}#
	else if(t<7.5 & t>=3.5){#
	cl= 0.75 #runif(1, 0.72, 0.77)#
	}#
	else if(t<9.5 & t>=7.5){#
	cl=0.83 #runif(1, 0.79, 0.87)#
	}#
	else if(t<12 & t>=9.5){#
	cl=1.02 #runif(1, 0.98, 1.06)#
	}#
	else if(t<=15.5 & t>=12){#
	cl=1.75 #runif(1, 1.69, 1.81)#
	}#
	else print('not larva')#
}#
t=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(t))#
for(i in 1:length(t))#
{#
	cl[i]=larvae.size(t[i])#
}#
plot(cl~t)#
#
##Add in mortality function#
mr=0.12 #Got mortality rates from data using 'Calculating mortality rates for larvae' script#
lr=1#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
#
###Let's create the actual model forloop for total mortality#
numbers=function(t, i) {#
	num=n.larvae[i]*exp(-(mortality(larvae.size(t)))*delta.t) ###Removed fishing mortrality#
}#
#
##Hmm.. for larvae, time span is limited to 15.5 days and in this case, maybe want higher resolution time point (like 0.5 days?)#
delta.t=0.5 ##Resolution between time points#
t.larvae=seq(from=0, to=15.5, by=delta.t) #
n.larvae=rep(0, length(t))#
m.larvae=rep(0, length(t))#
s.larvae=rep(0, length(t))#
#
n.larvae[1]=1 ##Starting population size#
#
for(i in 1:length(t.larvae))#
{#
	n.larvae[i+1]=numbers(t=t.larvae[i], i=i)#
	s.larvae[i+1]=larvae.size(t.larvae[i])#
	m.larvae[i+1]=mortality(larvae.size(t.larvae[i]))#
}#
#
t.1.larvae=c(t.larvae, max(t.larvae)+delta.t)#
par(mfrow=(c(2,2)))#
plot(s.larvae~t.1.larvae, ylab='Crab length (mm)', xlab='Days',  cex.lab=1.5, cex.axis=1.5)#
text(1, 1.6, labels=c('a'), cex=2 )#
plot(m.larvae~t.1.larvae, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.22, labels=c('b'), cex=2 )#
plot(n.larvae~t.1.larvae, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('c'), cex=2 )#
#
larval.data=data.frame(n.larvae,s.larvae,m.larvae)#
surv.larvae=larval.data[nrow(larval.data),]$n.larvae#
#n~0.09 after larvae (9% survival is decent)#
######Code for juveniles: for simplicity sake, I will leave variables as is and only change variable names for larvae#
l.inf=mean(c(219.8, 204.1, 208, 211.8, 211, 188.6)) ##average adult size (CW) in mm#
l.rel=mean(c(2.38, 2.43)) ##average size at crab stage 1#
# K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62)) ####Based on the modeled outputs and the results from Josileen and Menon 2005, I'm pretty sure these K values are annual growth rates. So I'm going to divide them by 365 and work in days#
K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62))/365#
#
size=function(t){#
	l=l.inf-(l.inf-l.rel)*exp(-K*t)#
}#
#
t=seq(0, 365, by =1) ##assume day#
length=size(t)#
plot(length~t, ylab='Carapace width (mm)', xlab='Days', cex.axis=1.5, cex.lab=1.5) ##excellent, growth output seems to match paper's data#
#
##Mortality function#
mr=0.0176 ###Using values from 'Calculating mortality rates for juveniles'#
lr=5#
#
mortality=function(l){#
	m=mr*(lr/l)#
}#
m=mortality(length)#
plot(m~length)#
#
plot(m~t)#
##Fishing function, may have actual data here=#
##Should note that f and m are 'rate' in Nexp(rt) so can be any positive numbers (greater than 1 less than 1, it's all good). But doesn't have any meaningful units. It's not %/time period#
f.inf=2.96 #SE 0.315#
# # q=-1.58 ##Pretty sure q has to be a negative number or equation should have a (-) sign. Going to make q solely positive and put (-) in equation#
q=0.158 ##SE 0.126 ##Maybe I want a different distribution than normal for this parameter (has to be solely positive, gamma or use absolute values)#
lc=108.3 ##SE 5.8 ##
#
fishing=function(l) {#
	f=f.inf/(1+exp(-q*(l-lc)))#
}#
#
f=fishing(length)#
plot(f~length)#
plot(f~t)#
#
##Construct actual forloop#
##Great everything works in theory and really, all I need now is to fill in numbers#
numbers=function(t, i) {#
	num=n[i]*exp(-(mortality(size(t))+fishing(size(t)))*delta.t)#
}#
#
t=seq(from=0, to=365, by=1) ##Need to figure out if starts at 1 or 0 for time. ##Might actually want 0 because that will give reference size for crabs (and relevant parameters following that)#
n=rep(0, length(t))#
h=rep(0, length(t))#
m=rep(0, length(t))#
s=rep(0, length(t))#
f=rep(0, length(t))#
#
n[1]=1#
delta.t=1#
for(i in 1:length(t))#
{#
	n[i+1]=numbers(t=t[i], i=i)#
	s[i+1]=size(t[i])#
	m[i+1]=mortality(size(t[i]))#
	f[i+1]=fishing(size(t[i]))#
}#
#
t.1=c(t, max(t)+1)#
par(mfrow=(c(2,2)))#
plot(s~t.1, ylab='Crab width (mm)', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 160, labels=c('a'), cex=2 )#
plot(m~t.1, ylab='Mortality rate', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.035, labels=c('b'), cex=2 )#
plot(f~t.1, ylab='Fishing mortality', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 2.8, labels=c('c'), cex=2 )#
plot(n~t.1, ylab='Cohort proportion survival', xlab='Days', cex.lab=1.5, cex.axis=1.5)#
text(1, 0.9, labels=c('d'), cex=2 )#
#
final.data=data.frame(n, m, s,f, t.1)#
final.data[final.data$s<100,]$n#
surv.juv=final.data[final.data$s<100,]$n[length(final.data[final.data$s<100,]$n)] ##This weird gross piece of code finds the last value for proportion survivng where crabs are right before 100mm#
#
surv.larvae*surv.juv#
}
30*100
3000/60
larvae.size=function(t){#
	if(t<3.5){#
	cl=runif(1, 0.44, 0.54)	#0.49 ##
	}#
	else if(t<7.5 & t>=3.5){#
	cl= runif(1, 0.72, 0.77) #0.75 ##
	}#
	else if(t<9.5 & t>=7.5){#
	cl=runif(1, 0.79, 0.87) #0.83 ##
	}#
	else if(t<12 & t>=9.5){#
	cl=runif(1, 0.98, 1.06) #1.02 ##
	}#
	else if(t<=15.5 & t>=12){#
	cl=runif(1, 1.69, 1.81) #1.75 ##
	}#
	else print('not larva')#
}#
t=seq(from =0, to =15.5, by =0.5)#
cl=rep(0, length(t))#
for(i in 1:length(t))#
{#
	cl[i]=larvae.size(t[i])#
}#
plot(cl~t)
l.inf=mean(c(219.8, 204.1, 208, 211.8, 211, 188.6))
l.inf
l.rel=mean(c(2.38, 2.43))
l.rel
K=mean(c(1.82, 1.8, 1.9, 1.7, 1.64, 1.62))/365
K
lr=mean(c(89, 139.8)) ##mm
lr
mean(c(1.09, 0.86))/365
mean(c(1.09, 0.86))/365*114.4
0.0176*5
0.93/365
mean(152.04,173.04)
mean(c(152.04,173.04))
mean(c(0.93,0.68))
mean(c(0.93,0.68))/365
lr=mean(c(23-173))
mr=1.05/365
mr*lr
lr=mean(c(23,173))
lr
lr=mean(c(89, 139.8)) ##mm
lr
lr=mean(c(23,173))
mr=1.05/365
mr*lr
mr
lr
